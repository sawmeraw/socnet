basePath: /v1
definitions:
  main.UserActionPayload:
    properties:
      user_id:
        type: integer
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: integer
    type: object
  store.PostWithMetadata:
    properties:
      comment_count:
        type: integer
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/store.User'
      userId:
        type: integer
      version:
        type: integer
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for socnet, a socialnetwork app
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Socnet API
  version: 0.0.1
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Responds with health details about the server
      responses:
        "200":
          description: Server is up
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Health check
      tags:
      - health
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Follows a user by user ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Follow options
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UserActionPayload'
      responses:
        "204":
          description: User followed
          schema:
            type: string
        "400":
          description: User payload mising
          schema: {}
        "404":
          description: User not found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follow a user
      tags:
      - users
  /users/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollows a user by user ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Follow options
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UserActionPayload'
      responses:
        "204":
          description: User unfollowed
          schema:
            type: string
        "400":
          description: User payload mising
          schema: {}
        "404":
          description: User not found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Fetches the user feed by userID and params
      parameters:
      - description: Since
        in: query
        name: since
        type: string
      - description: Until
        in: query
        name: until
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      - description: Sort
        in: query
        name: sort
        type: string
      - description: Tags
        in: query
        name: tags
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.PostWithMetadata'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetch user feed
      tags:
      - feed
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
